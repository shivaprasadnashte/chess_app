[{"/home/shivaprasad/Desktop/chess-app/src/index.tsx":"1","/home/shivaprasad/Desktop/chess-app/src/reportWebVitals.ts":"2","/home/shivaprasad/Desktop/chess-app/src/App.tsx":"3","/home/shivaprasad/Desktop/chess-app/src/components/Referee/Referee.tsx":"4","/home/shivaprasad/Desktop/chess-app/src/Constants.ts":"5","/home/shivaprasad/Desktop/chess-app/src/Types.ts":"6","/home/shivaprasad/Desktop/chess-app/src/components/Chessboard/Chessboard.tsx":"7","/home/shivaprasad/Desktop/chess-app/src/models/index.ts":"8","/home/shivaprasad/Desktop/chess-app/src/models/Pawn.ts":"9","/home/shivaprasad/Desktop/chess-app/src/models/Position.ts":"10","/home/shivaprasad/Desktop/chess-app/src/models/Piece.ts":"11","/home/shivaprasad/Desktop/chess-app/src/models/Board.ts":"12","/home/shivaprasad/Desktop/chess-app/src/referee/rules/index.ts":"13","/home/shivaprasad/Desktop/chess-app/src/components/Tile/Tile.tsx":"14","/home/shivaprasad/Desktop/chess-app/src/referee/rules/KnightRules.ts":"15","/home/shivaprasad/Desktop/chess-app/src/referee/rules/PawnRules.ts":"16","/home/shivaprasad/Desktop/chess-app/src/referee/rules/RookRules.ts":"17","/home/shivaprasad/Desktop/chess-app/src/referee/rules/BishopRules.ts":"18","/home/shivaprasad/Desktop/chess-app/src/referee/rules/QueenRules.ts":"19","/home/shivaprasad/Desktop/chess-app/src/referee/rules/KingRules.ts":"20","/home/shivaprasad/Desktop/chess-app/src/referee/rules/GeneralRules.ts":"21"},{"size":500,"mtime":1726690496722,"results":"22","hashOfConfig":"23"},{"size":425,"mtime":1726690496723,"results":"24","hashOfConfig":"23"},{"size":176,"mtime":1726690496721,"results":"25","hashOfConfig":"23"},{"size":7180,"mtime":1726690496722,"results":"26","hashOfConfig":"23"},{"size":2804,"mtime":1726690496721,"results":"27","hashOfConfig":"23"},{"size":210,"mtime":1726690496721,"results":"28","hashOfConfig":"23"},{"size":4172,"mtime":1726690496722,"results":"29","hashOfConfig":"23"},{"size":52,"mtime":1726690496722,"results":"30","hashOfConfig":"23"},{"size":612,"mtime":1726690496722,"results":"31","hashOfConfig":"23"},{"size":362,"mtime":1726690496722,"results":"32","hashOfConfig":"23"},{"size":1529,"mtime":1726690496722,"results":"33","hashOfConfig":"23"},{"size":7886,"mtime":1726690496722,"results":"34","hashOfConfig":"23"},{"size":178,"mtime":1726690496723,"results":"35","hashOfConfig":"23"},{"size":537,"mtime":1726690496722,"results":"36","hashOfConfig":"23"},{"size":1842,"mtime":1726690496723,"results":"37","hashOfConfig":"23"},{"size":3395,"mtime":1726690496723,"results":"38","hashOfConfig":"23"},{"size":3674,"mtime":1726690496723,"results":"39","hashOfConfig":"23"},{"size":4721,"mtime":1726690496722,"results":"40","hashOfConfig":"23"},{"size":4541,"mtime":1726690496723,"results":"41","hashOfConfig":"23"},{"size":7307,"mtime":1726690496722,"results":"42","hashOfConfig":"23"},{"size":888,"mtime":1726690496722,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"s87vk8",{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/shivaprasad/Desktop/chess-app/src/index.tsx",[],"/home/shivaprasad/Desktop/chess-app/src/reportWebVitals.ts",[],"/home/shivaprasad/Desktop/chess-app/src/App.tsx",[],"/home/shivaprasad/Desktop/chess-app/src/components/Referee/Referee.tsx",["87","88","89","90","91","92","93","94","95","96","97","98"],"import { useEffect, useRef, useState } from \"react\";\nimport { initialBoard } from \"../../Constants\";\nimport { Piece, Position } from \"../../models\";\nimport { Board } from \"../../models/Board\";\nimport { Pawn } from \"../../models/Pawn\";\nimport { bishopMove, getPossibleBishopMoves, getPossibleKingMoves, getPossibleKnightMoves, getPossiblePawnMoves, getPossibleQueenMoves, getPossibleRookMoves, kingMove, knightMove, pawnMove, queenMove, rookMove } from \"../../referee/rules\";\nimport { PieceType, TeamType } from \"../../Types\";\nimport Chessboard from \"../Chessboard/Chessboard\";\n\nexport default function Referee() {\n    const [board, setBoard] = useState<Board>(initialBoard.clone());\n    const [promotionPawn, setPromotionPawn] = useState<Piece>();\n    const modalRef = useRef<HTMLDivElement>(null);\n    const checkmateModalRef = useRef<HTMLDivElement>(null);\n\n    function playMove(playedPiece: Piece, destination: Position): boolean {\n        // If the playing piece doesn't have any moves return\n        if (playedPiece.possibleMoves === undefined) return false;\n\n        // Prevent the inactive team from playing\n        if (playedPiece.team === TeamType.OUR\n            && board.totalTurns % 2 !== 1) return false;\n        if (playedPiece.team === TeamType.OPPONENT\n            && board.totalTurns % 2 !== 0) return false;\n\n        let playedMoveIsValid = false;\n\n        const validMove = playedPiece.possibleMoves?.some(m => m.samePosition(destination));\n\n        if (!validMove) return false;\n\n        const enPassantMove = isEnPassantMove(\n            playedPiece.position,\n            destination,\n            playedPiece.type,\n            playedPiece.team\n        );\n\n        // playMove modifies the board thus we\n        // need to call setBoard\n        setBoard(() => {\n            const clonedBoard = board.clone();\n            clonedBoard.totalTurns += 1;\n            // Playing the move\n            playedMoveIsValid = clonedBoard.playMove(enPassantMove,\n                validMove, playedPiece,\n                destination);\n\n            if(clonedBoard.winningTeam !== undefined) {\n                checkmateModalRef.current?.classList.remove(\"hidden\");\n            }\n\n            return clonedBoard;\n        })\n\n        // This is for promoting a pawn\n        let promotionRow = (playedPiece.team === TeamType.OUR) ? 7 : 0;\n\n        if (destination.y === promotionRow && playedPiece.isPawn) {\n            modalRef.current?.classList.remove(\"hidden\");\n            setPromotionPawn((previousPromotionPawn) => {\n                const clonedPlayedPiece = playedPiece.clone();\n                clonedPlayedPiece.position = destination.clone();\n                return clonedPlayedPiece;\n            });\n        }\n\n        return playedMoveIsValid;\n    }\n\n    function isEnPassantMove(\n        initialPosition: Position,\n        desiredPosition: Position,\n        type: PieceType,\n        team: TeamType\n    ) {\n        const pawnDirection = team === TeamType.OUR ? 1 : -1;\n\n        if (type === PieceType.PAWN) {\n            if (\n                (desiredPosition.x - initialPosition.x === -1 ||\n                    desiredPosition.x - initialPosition.x === 1) &&\n                desiredPosition.y - initialPosition.y === pawnDirection\n            ) {\n                const piece = board.pieces.find(\n                    (p) =>\n                        p.position.x === desiredPosition.x &&\n                        p.position.y === desiredPosition.y - pawnDirection &&\n                        p.isPawn &&\n                        (p as Pawn).enPassant\n                );\n                if (piece) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    //TODO\n    //Add stalemate!\n    function isValidMove(initialPosition: Position, desiredPosition: Position, type: PieceType, team: TeamType) {\n        let validMove = false;\n        switch (type) {\n            case PieceType.PAWN:\n                validMove = pawnMove(initialPosition, desiredPosition, team, board.pieces);\n                break;\n            case PieceType.KNIGHT:\n                validMove = knightMove(initialPosition, desiredPosition, team, board.pieces);\n                break;\n            case PieceType.BISHOP:\n                validMove = bishopMove(initialPosition, desiredPosition, team, board.pieces);\n                break;\n            case PieceType.ROOK:\n                validMove = rookMove(initialPosition, desiredPosition, team, board.pieces);\n                break;\n            case PieceType.QUEEN:\n                validMove = queenMove(initialPosition, desiredPosition, team, board.pieces);\n                break;\n            case PieceType.KING:\n                validMove = kingMove(initialPosition, desiredPosition, team, board.pieces);\n        }\n\n        return validMove;\n    }\n\n    function promotePawn(pieceType: PieceType) {\n        if (promotionPawn === undefined) {\n            return;\n        }\n\n        setBoard((previousBoard) => {\n            const clonedBoard = board.clone();\n            clonedBoard.pieces = clonedBoard.pieces.reduce((results, piece) => {\n                if (piece.samePiecePosition(promotionPawn)) {\n                    results.push(new Piece(piece.position.clone(), pieceType,\n                        piece.team, true));\n                } else {\n                    results.push(piece);\n                }\n                return results;\n            }, [] as Piece[]);\n\n            clonedBoard.calculateAllMoves();\n\n            return clonedBoard;\n        })\n\n        modalRef.current?.classList.add(\"hidden\");\n    }\n\n    function promotionTeamType() {\n        return (promotionPawn?.team === TeamType.OUR) ? \"w\" : \"b\";\n    }\n    \n    function restartGame() {\n        checkmateModalRef.current?.classList.add(\"hidden\");\n        setBoard(initialBoard.clone());\n    }\n\n    return (\n        <>\n            <p style={{ color: \"white\", fontSize: \"24px\", textAlign: \"center\" }}>Total turns: {board.totalTurns}</p>\n            <div className=\"modal hidden\" ref={modalRef}>\n                <div className=\"modal-body\">\n                    <img onClick={() => promotePawn(PieceType.ROOK)} src={`/assets/images/rook_${promotionTeamType()}.png`} />\n                    <img onClick={() => promotePawn(PieceType.BISHOP)} src={`/assets/images/bishop_${promotionTeamType()}.png`} />\n                    <img onClick={() => promotePawn(PieceType.KNIGHT)} src={`/assets/images/knight_${promotionTeamType()}.png`} />\n                    <img onClick={() => promotePawn(PieceType.QUEEN)} src={`/assets/images/queen_${promotionTeamType()}.png`} />\n                </div>\n            </div>\n            <div className=\"modal hidden\" ref={checkmateModalRef}>\n                <div className=\"modal-body\">\n                    <div className=\"checkmate-body\">\n                        <span>The winning team is {board.winningTeam === TeamType.OUR ? \"white\" : \"black\"}!</span>\n                        <button onClick={restartGame}>Play again</button>\n                    </div>\n                </div>\n            </div>\n            <Chessboard playMove={playMove}\n                pieces={board.pieces} />\n        </>\n    )\n}","/home/shivaprasad/Desktop/chess-app/src/Constants.ts",[],"/home/shivaprasad/Desktop/chess-app/src/Types.ts",[],"/home/shivaprasad/Desktop/chess-app/src/components/Chessboard/Chessboard.tsx",[],"/home/shivaprasad/Desktop/chess-app/src/models/index.ts",[],"/home/shivaprasad/Desktop/chess-app/src/models/Pawn.ts",[],"/home/shivaprasad/Desktop/chess-app/src/models/Position.ts",[],"/home/shivaprasad/Desktop/chess-app/src/models/Piece.ts",[],"/home/shivaprasad/Desktop/chess-app/src/models/Board.ts",[],"/home/shivaprasad/Desktop/chess-app/src/referee/rules/index.ts",[],"/home/shivaprasad/Desktop/chess-app/src/components/Tile/Tile.tsx",[],"/home/shivaprasad/Desktop/chess-app/src/referee/rules/KnightRules.ts",[],"/home/shivaprasad/Desktop/chess-app/src/referee/rules/PawnRules.ts",[],"/home/shivaprasad/Desktop/chess-app/src/referee/rules/RookRules.ts",[],"/home/shivaprasad/Desktop/chess-app/src/referee/rules/BishopRules.ts",[],"/home/shivaprasad/Desktop/chess-app/src/referee/rules/QueenRules.ts",[],"/home/shivaprasad/Desktop/chess-app/src/referee/rules/KingRules.ts",[],"/home/shivaprasad/Desktop/chess-app/src/referee/rules/GeneralRules.ts",[],{"ruleId":"99","severity":1,"message":"100","line":1,"column":10,"nodeType":"101","messageId":"102","endLine":1,"endColumn":19},{"ruleId":"99","severity":1,"message":"103","line":6,"column":22,"nodeType":"101","messageId":"102","endLine":6,"endColumn":44},{"ruleId":"99","severity":1,"message":"104","line":6,"column":46,"nodeType":"101","messageId":"102","endLine":6,"endColumn":66},{"ruleId":"99","severity":1,"message":"105","line":6,"column":68,"nodeType":"101","messageId":"102","endLine":6,"endColumn":90},{"ruleId":"99","severity":1,"message":"106","line":6,"column":92,"nodeType":"101","messageId":"102","endLine":6,"endColumn":112},{"ruleId":"99","severity":1,"message":"107","line":6,"column":114,"nodeType":"101","messageId":"102","endLine":6,"endColumn":135},{"ruleId":"99","severity":1,"message":"108","line":6,"column":137,"nodeType":"101","messageId":"102","endLine":6,"endColumn":157},{"ruleId":"99","severity":1,"message":"109","line":103,"column":14,"nodeType":"101","messageId":"102","endLine":103,"endColumn":25},{"ruleId":"110","severity":1,"message":"111","line":167,"column":21,"nodeType":"112","endLine":167,"endColumn":127},{"ruleId":"110","severity":1,"message":"111","line":168,"column":21,"nodeType":"112","endLine":168,"endColumn":131},{"ruleId":"110","severity":1,"message":"111","line":169,"column":21,"nodeType":"112","endLine":169,"endColumn":131},{"ruleId":"110","severity":1,"message":"111","line":170,"column":21,"nodeType":"112","endLine":170,"endColumn":129},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'getPossibleBishopMoves' is defined but never used.","'getPossibleKingMoves' is defined but never used.","'getPossibleKnightMoves' is defined but never used.","'getPossiblePawnMoves' is defined but never used.","'getPossibleQueenMoves' is defined but never used.","'getPossibleRookMoves' is defined but never used.","'isValidMove' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]